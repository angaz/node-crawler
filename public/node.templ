package public

import "github.com/ethereum/node-crawler/pkg/database"
import "strconv"
import "fmt"
import "encoding/hex"

templ NodeTable(nt database.NodeTable) {
	<div style="margin: 1em;">
		<h3>Node</h3>
		<table style="max-width=100%">
			<tbody>
				<tr>
					<td>ID</td>
					<td>{ nt.NodeID() }</td>
				</tr>
				<tr>
					<td>Client Name</td>
					<td>{ database.StringOrEmpty(nt.ClientName) }</td>
				</tr>
				<tr>
					<td>Last Update</td>
					<td>{ nt.UpdatedAt() }</td>
				</tr>
				<tr>
					<td>Enode</td>
					<td>{ database.StringOrEmpty(nt.Enode) }</td>
				</tr>
				<tr>
					<td>RLPx Version</td>
					<td>{ nt.RLPXVersion() }</td>
				</tr>
				<tr>
					<td>Capabilities</td>
					<td>{ database.StringOrEmpty(nt.Capabilities) }</td>
				</tr>
				<tr>
					<td>Network ID</td>
					<td>{ nt.NetworkID() }</td>
				</tr>
				<tr>
					<td>Fork ID</td>
					<td>{ hex.EncodeToString(nt.ForkID[:]) }</td>
				</tr>
				<tr>
					<td>Next Fork ID</td>
					if nt.NextForkID != nil {
						<td>{ strconv.FormatUint(*nt.NextForkID, 10) }</td>
					} else {
						<td></td>
					}
				</tr>
				<tr>
					<td>Head Hash</td>
					<td>{ nt.HeadHashLine() }</td>
				</tr>
				<tr>
					<td>IP Address</td>
					<td>{ database.StringOrEmpty(nt.IP) }</td>
				</tr>
				<tr>
					<td>Connection Type</td>
					<td>{ database.StringOrEmpty(nt.ConnectionType) }</td>
				</tr>
				<tr>
					<td>Country</td>
					<td>{ database.StringOrEmpty(nt.Country) }</td>
				</tr>
				<tr>
					<td>City</td>
					<td>{ database.StringOrEmpty(nt.City) }</td>
				</tr>
				<tr>
					<td>Next Crawl (Scheduled)</td>
					<td>{ nt.NextCrawl() }</td>
				</tr>
				<tr>
					<td>Is Synced</td>
					<td>{ nt.IsSynced() }</td>
				</tr>
			</tbody>
		</table>
		<div style="position: relative; width: max-content;">
			<image width="800px" src="https://upload.wikimedia.org/wikipedia/commons/thumb/2/23/Blue_Marble_2002.png/1280px-Blue_Marble_2002.png"></image>
			<image style="REPLACE_THIS_ETH_LOGO" height="10%" src="https://ethereum.org/static/2aba39d4e25d90caabb0c85a58c6aba9/f41b0/eth-glyph-colored.png"></image>
		</div>
		<h3>Crawl Hitory</h3>
		<table>
			<thead>
				<tr>
					<td>Timestamp</td>
					<td>Direction</td>
					<td>Error</td>
				</tr>
			</thead>
			<tbody>
				for _, row := range nt.History {
					<tr>
						<td>{ row.CrawledAt.UTC().Format(database.DateFormat) }</td>
						<td>{ row.Direction }</td>
						<td>{ row.Error }</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
}

css nodeListClass() {
	display: flex;
	flex-direction: row;
	justify-content: center;
	margin: 1em;
}

templ NodeList(nodes database.NodeList) {
	<div class={ nodeListClass() }>
		<div style="width:100%">
			<h3>Nodes</h3>
			<div style="display:none">
				for _, networkID := range nodes.Networks {
					<a href={ templ.URL(fmt.Sprintf("/nodes?network=%d&page=%d", networkID, nodes.PageNumber)) }>
						{ database.NetworkName(&networkID) }
					</a>
				}
			</div>
			<div style="display: flex; flex-direction: row; gap: 0.5em;">
				<a
 					class={ 
						pageButton(),
						templ.KV(pageButtonActive(), -1 == nodes.NetworkFilter),
						templ.KV(pageButtonInactive(), -1 != nodes.NetworkFilter),
					 }
 					href={ templ.URL(fmt.Sprintf("/nodes?network=%d&page=%d", -1, nodes.PageNumber)) }
				>
					All (-1)
				</a>
				for _, networkID := range []int64{1, 5, 17000, 11155111} {
					<a
 						class={ 
							pageButton(),
							templ.KV(pageButtonActive(), networkID == nodes.NetworkFilter),
							templ.KV(pageButtonInactive(), networkID != nodes.NetworkFilter),
						 }
 						href={ templ.URL(fmt.Sprintf("/nodes?network=%d&page=%d&synced=%d", networkID, nodes.PageNumber, nodes.Synced)) }
					>
						{ database.NetworkName(&networkID) }
					</a>
				}
			</div>
			<div style="display: flex; flex-direction: row; gap: 0.5em;">
					<a
						class={ 
							pageButton(),
							templ.KV(pageButtonActive(), nodes.Synced == -1),
							templ.KV(pageButtonInactive(), nodes.Synced != -1),
						 }
 						href={ templ.URL(fmt.Sprintf("/nodes?network=%d&page=%d&synced=-1", nodes.NetworkFilter, nodes.PageNumber)) }
					>
						All
					</a>
					<a
						class={ 
							pageButton(),
							templ.KV(pageButtonActive(), nodes.Synced == 1),
							templ.KV(pageButtonInactive(), nodes.Synced != 1),
						 }
 						href={ templ.URL(fmt.Sprintf("/nodes?network=%d&page=%d&synced=1", nodes.NetworkFilter, nodes.PageNumber)) }
					>
						Synced
					</a>
					<a
						class={ 
							pageButton(),
							templ.KV(pageButtonActive(), nodes.Synced == 0),
							templ.KV(pageButtonInactive(), nodes.Synced != 0),
						 }
 						href={ templ.URL(fmt.Sprintf("/nodes?network=%d&page=%d&synced=0", nodes.NetworkFilter, nodes.PageNumber)) }
					>
						Not Synced
					</a>
			</div>
			<table style="width:100%">
				<thead>
					<tr>
						<td>Node ID</td>
						<td>Client Name</td>
						<td>Last Update</td>
						<td>Country</td>
						<td>Is Synced</td>
					</tr>
				</thead>
				<tbody>
					for _, row := range nodes.List {
						<tr>
							<td><a href={ templ.URL("/nodes/" + row.NodeID()) }>{ row.NodeID()[:8] }</a></td>
							if row.ClientName != nil {
								<td>{ *row.ClientName }</td>
							} else {
								<td></td>
							}
							<td title={ row.UpdatedAt.UTC().Format(database.DateFormat) }>{ row.SinceUpdate() }</td>
							if row.Country != nil {
								<td>{ *row.Country }</td>
							} else {
								<td></td>
							}
							<td>{ row.IsSynced() }</td>
						</tr>
					}
				</tbody>
			</table>
			<div style="display:flex;flex-direction:row;justify-content:space-between;align-items:center;gap:2em">
				<span>
					{ strconv.Itoa(nodes.Offset+1) }
					to
					{ strconv.Itoa(min(nodes.Offset+nodes.PageSize+1, nodes.Total)) }
					of
					{ strconv.Itoa(nodes.Total) }
					Nodes
				</span>
				<div style="display:flex;flex-direction:row;align-items:center">
					if nodes.PageNumber > 6 {
						@pageNumberButton(nodes.NetworkFilter, 1, false, nodes.Synced)
						@spacer()
					}
					for i := startPage(nodes); i <= endPage(nodes); i++ {
						@pageNumberButton(nodes.NetworkFilter, i, i == nodes.PageNumber, nodes.Synced)
					}
					if nodes.PageNumber < nodes.NPages() - 4 {
						@spacer()
						@pageNumberButton(nodes.NetworkFilter, nodes.NPages(), false, nodes.Synced)
					}
				</div>
			</div>
		</div>
	</div>
}

func startPage(nodes database.NodeList) int {
	if nodes.PageNumber < 7 {
		return 1
	}

	if nodes.PageNumber > nodes.NPages()-5 {
		return nodes.NPages() - 8
	}

	return nodes.PageNumber - 3
}

func endPage(nodes database.NodeList) int {
	if nodes.PageNumber < 6 {
		return 9
	}

	if nodes.PageNumber > nodes.NPages()-5 {
		return nodes.NPages()
	}

	return nodes.PageNumber + 3
}

templ spacer() {
	<div style="padding:0.5em 1em">
		<span>...</span>
	</div>
}

templ pageNumberButton(networkID int64, pageNumber int, isPage bool, synced int) {
	<a
 		href={ templ.URL(fmt.Sprintf("/nodes?network=%d&page=%d&synced=%d", networkID, pageNumber, synced)) }
 		class={ 
			pageButton(),
			templ.KV(pageButtonActive(), isPage),
			templ.KV(pageButtonInactive(), !isPage),
		 }
	>
		{ strconv.Itoa(pageNumber) }
	</a>
}

css pageButton() {
	margin: 0.1em;
	padding: 0.5em 1em;
	border-radius: 0.2em;
}

css pageButtonActive() {
	border: 2px solid orange;
}

css pageButtonInactive() {
	border: 2px solid #eee;
}

templ Stats(clients []database.Count, maxValue int, networkID int64, synced int) {
	<div style="display: flex; flex-direction: column; padding: 1em; gap: 1em;">
		<div style="display: flex; flex-direction: row; gap: 0.5em;">
			<a
				class={ 
					pageButton(),
					templ.KV(pageButtonActive(), -1 == networkID),
					templ.KV(pageButtonInactive(), -1 != networkID),
				 }
				href={ templ.URL(fmt.Sprintf("/?network=%d&synced=%d", -1, synced)) }
			>
				All (-1)
			</a>
			for _, netID := range []int64{1, 5, 17000, 11155111} {
				<a
					class={ 
						pageButton(),
						templ.KV(pageButtonActive(), netID == networkID),
						templ.KV(pageButtonInactive(), netID != networkID),
					 }
					href={ templ.URL(fmt.Sprintf("/?network=%d&synced=%d", netID, synced)) }
				>
					{ database.NetworkName(&netID) } ({ strconv.FormatInt(netID, 10) })
				</a>
			}
		</div>
		<div style="display: flex; flex-direction: row; gap: 0.5em;">
				<a
					class={ 
						pageButton(),
						templ.KV(pageButtonActive(), synced == -1),
						templ.KV(pageButtonInactive(), synced != -1),
					 }
					href={ templ.URL(fmt.Sprintf("/?network=%d&synced=-1", networkID)) }
				>
					All
				</a>
				<a
					class={ 
						pageButton(),
						templ.KV(pageButtonActive(), synced == 1),
						templ.KV(pageButtonInactive(), synced != 1),
					 }
					href={ templ.URL(fmt.Sprintf("/?network=%d&synced=1", networkID)) }
				>
					Synced
				</a>
				<a
					class={ 
						pageButton(),
						templ.KV(pageButtonActive(), synced == 0),
						templ.KV(pageButtonInactive(), synced != 0),
					 }
					href={ templ.URL(fmt.Sprintf("/?network=%d&synced=0", networkID)) }
				>
					Not Synced
				</a>
		</div>
		<div style="display: flex; flex-direction: column;">
				for i := len(clients)-1; i >= 0; i-- {
					<div STYLE_REPLACE={fmt.Sprintf("background-color: #333; padding: 0.5em 0; width: %d%%", clients[i].Count * 100 / maxValue)}>
							<span style="padding-inline-start: 0.5em; white-space: nowrap;">{ clients[i].Key } ({ strconv.Itoa(clients[i].Count) })</span>
					</div>
				}
		</div>
	</div>
}

templ Index(main templ.Component) {
	<!DOCTYPE html>
	<html lang="en-US">
		<head>
			<title>Node Crawler</title>
			<style type="text/css">
				body {
					margin: 0;
					background-color: #222;
					color: #eee;
				}
				a:link {
					color: #eee;
				}
				a:visited {
					color: orange;
				}
				td {
					padding: 0.5em 1em;
					word-break: break-all;
				}
				td:first-child {
					white-space: nowrap;
				}
				tr:nth-of-type(even) {
					background-color: #333;
				}
				nav {
					background-color: #333;
					display: flex;
					flex-direction: row;
				}
				nav ul {
					display: flex;
					flex-direction: row;
					list-style-type: none;
					margin: 0;
					padding: 0;
					overflow: hidden;
				}
				nav li a,
				nav li a:visited {
					display: block;
					color: white;
					text-align: center;
					padding: 1em;
					text-decoration: none;
				}
				nav li a:hover {
					background-color: #111;
				}
			</style>
		</head>
		<body>
			<nav>
				<ul>
					<li><a href="/">Stats</a></li>
					<li><a href="/nodes?network=1&page=1&synced=-1">Nodes</a></li>
				</ul>
			</nav>
			<main>
				{! main }
			</main>
		</body>
	</html>
}
