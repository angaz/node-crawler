package public

import "github.com/ethereum/node-crawler/pkg/database"
import "strconv"
import "fmt"
import "io/fs"
import "time"
import "net/url"
import "net/http"
import "github.com/ethereum/node-crawler/pkg/common"

templ NodeTable(nt database.NodeTable) {
	<div style="margin: 1em;">
		<h3>Node</h3>
		<table style="max-width=100%">
			<tbody>
				<tr>
					<td>ID</td>
					<td>{ nt.NodeID() }</td>
				</tr>
				<tr>
					<td>Client Identifier</td>
					<td>{ database.StringOrEmpty(nt.ClientID) }</td>
				</tr>
				<tr>
					<td>Client Name</td>
					<td>{ database.StringOrEmpty(nt.ClientName) }</td>
				</tr>
				<tr>
					<td>Client User Data</td>
					<td>{ database.StringOrEmpty(nt.ClientUserData) }</td>
				</tr>
				<tr>
					<td>Client Version</td>
					<td>{ database.StringOrEmpty(nt.ClientVersion) }</td>
				</tr>
				<tr>
					<td>Client Build</td>
					<td>{ database.StringOrEmpty(nt.ClientBuild) }</td>
				</tr>
				<tr>
					<td>Client OS</td>
					<td>{ database.StringOrEmpty(nt.ClientOS) }</td>
				</tr>
				<tr>
					<td>Client Arch</td>
					<td>{ database.StringOrEmpty(nt.ClientArch) }</td>
				</tr>
				<tr>
					<td>Client Language</td>
					<td>{ database.StringOrEmpty(nt.ClientLanguage) }</td>
				</tr>
				<tr>
					<td>Last Found (Discovery)</td>
					<td>{ nt.LastFound() }</td>
				</tr>
				<tr>
					<td>Last Update (Crawled)</td>
					<td>{ nt.UpdatedAt() }</td>
				</tr>
				<tr>
					<td>Enode</td>
					<td>{ common.EnodeString(nt.NodeRecord) }</td>
				</tr>
				<tr>
					<td>Record</td>
					<td>{ common.ENRString(nt.NodeRecord) }</td>
				</tr>
				<tr>
					<td>RLPx Version</td>
					<td>{ nt.RLPXVersion() }</td>
				</tr>
				<tr>
					<td>Capabilities</td>
					<td>{ database.StringOrEmpty(nt.Capabilities) }</td>
				</tr>
				<tr>
					<td>Network ID</td>
					<td>{ nt.NetworkID() }</td>
				</tr>
				<tr>
					<td>Fork ID</td>
					<td>{ nt.ForkIDStr() }</td>
				</tr>
				<tr>
					<td>Next Fork ID</td>
					<td>{ nt.NextForkIDStr() }</td>
				</tr>
				<tr>
					<td>Head Hash</td>
					<td>{ nt.HeadHashLine() }</td>
				</tr>
				<tr>
					<td>IP Address</td>
					<td>{ database.StringOrEmpty(nt.IP) }</td>
				</tr>
				<tr>
					<td>Connection Type</td>
					<td>{ database.StringOrEmpty(nt.ConnectionType) }</td>
				</tr>
				<tr>
					<td>Country</td>
					<td>{ database.StringOrEmpty(nt.Country) }</td>
				</tr>
				<tr>
					<td>City</td>
					<td>{ database.StringOrEmpty(nt.City) }</td>
				</tr>
				<tr>
					<td>Next Crawl (Scheduled)</td>
					<td>{ nt.NextCrawl() }</td>
				</tr>
				<tr>
					<td>Is Synced</td>
					<td>{ nt.IsSynced() }</td>
				</tr>
				<tr>
					<td>Dial Success</td>
					<td>{ boolToYesNo(nt.DialSuccess) }</td>
				</tr>
			</tbody>
		</table>
		<div style="position: relative; width: max-content; margin: 1em 0;">
			<image width="800px" src="/static/blue-marble.png"></image>
			<image style="REPLACE_THIS_ETH_LOGO" height="10%" src="/static/eth-diamond-purple.png"></image>
		</div>
		<h3>Crawl History</h3>
		<div style="display: flex; flex-wrap: wrap; column-gap: 2em;">
			<div style="display: flex; flex-direction: column; align-items: center; gap: 0.5em; border: 1px solid orange; border-radius: 1em; padding: 1em;">
				<h4 style="margin: 0;">Accept</h4>
				<span>Connections initiated by the node</span>
				<table>
					<thead>
						<tr>
							<td>Timestamp</td>
							<td>Since</td>
							<td>Error</td>
						</tr>
					</thead>
					<tbody>
						for _, row := range nt.HistoryAccept {
							<tr>
								<td>{ row.CrawledAt.UTC().Format(database.DateFormat) }</td>
								<td>{ row.CrawledAtLine() }</td>
								<td>{ row.Error }</td>
							</tr>
						}
					</tbody>
				</table>
			</div>
			<div style="display: flex; flex-direction: column; align-items: center; gap: 0.5em; border: 1px solid orange; border-radius: 1em; padding: 1em;">
				<h4 style="margin: 0;">Dial</h4>
				<span>Connections initiated by the crawler</span>
				<table>
					<thead>
						<tr>
							<td>Timestamp</td>
							<td>Since</td>
							<td>Error</td>
						</tr>
					</thead>
					<tbody>
						for _, row := range nt.HistoryDial {
							<tr>
								<td>{ row.CrawledAt.UTC().Format(database.DateFormat) }</td>
								<td>{ row.CrawledAtLine() }</td>
								<td>{ row.Error }</td>
							</tr>
						}
					</tbody>
				</table>
			</div>
		</div>
	</div>
}

func ByteCountIEC(b int64) string {
	const unit = int64(1024)

	if b < unit {
		return fmt.Sprintf("%d B", b)
	}

	div, exp := unit, 0
	for n := b / unit; n >= unit; n /= unit {
		div *= unit
		exp++
	}

	return fmt.Sprintf(
		"%.1f %ciB",
		float64(b)/float64(div),
		"KMGTPE"[exp],
	)
}

templ SnapshotsList(files []fs.FileInfo) {
	<div style="margin: 1em;">
		<h3>SQLite3 Snapshots</h3>
		<table style="max-width=100%">
			<thead>
				<tr>
					<td>Filename</td>
					<td>Size</td>
					<td>Modified (UTC)</td>
				</tr>
			</thead>
			<tbody>
				for _, file := range files {
					<tr>
						<td>
							<a href={ templ.URL("/snapshots/" + file.Name()) }>
								{ file.Name() }
							</a>
						</td>
						<td title={ strconv.FormatInt(file.Size(), 10) }>{ ByteCountIEC(file.Size()) }</td>
						<td>{ file.ModTime().UTC().Format(time.DateTime) }</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
}

templ HelpPage(enode string) {
	<style>
		:target {
			color: #111;
			background-color: orange;
		}
	</style>
	<div style="display: flex; flex-direction: row; gap: 1em; padding: 1em; flex-wrap: wrap;">
		<div>
			<ul>
				<li>
					<a href="#dial-accept">Dial / Accept</a>
				</li>
				<li>
					<a href="#add-your-node">Add Your Node</a>
					<ul>
						<li>
							<a href="#add-your-node-rpc">RPC (All Clients)</a>
						</li>
						<li>
							<a href="#add-your-node-geth">Geth</a>
						</li>
					</ul>
				</li>
				<li>
					<a href="#find-node-id">Find Your Node ID</a>
					<ul>
						<li>
							<a href="#find-node-id-rpc">RPC (All Clients)</a>
						</li>
						<li>
							<a href="#find-node-id-geth">Geth</a>
						</li>
					</ul>
				</li>
			</ul>
		</div>
		<div style="display: flex; flex-direction: column; gap: 1em; padding: 1em; overflow-y: scroll">
			<h2>Help</h2>
			<div style="display: flex; flex-direction: column;">
				<h3 id="dial-accept">Dial / Accept, what does it mean?</h3>
				<p>
					There's a few mentions of "Dial" and "Accept" on the website.
					This is referring to the crawler dialing (connecting to) a node, or
					accepting a connection from a node.
				</p>

				<p>
					The "Dial Success" value used in a few places means that the crawler
					was able to connect to the node in the last 14 days.
				</p>

				<h3 id="#add-your-node">Add your node</h3>
				<p>If your node is not found, it can be easily added.</p>

				<h4 id="add-your-node-rpc">RPC (All Clients)</h4>
				<p>
					This is an admin method, to use it, you need to enable the admin API:
				</p>

				<div style="padding-inline-start: 1em;">
					<h4>Besu</h4>
					<p>
						Add the startup flag: <code>--rpc-http-api</code>
					</p>

					<h4>Erigon</h4>
					<p>
						Add the startup flag: <code>--private.api.addr=localhost:8545</code>
					</p>

					<h4>Nethermind</h4>
					<p>
						Add the startup flags: <code>--JsonRpc.Enabled true --JsonRpc.EnabledModules admin</code>
					</p>

					<h4>Reth</h4>
					<p>
						Add the startup flags: <code>--http --http.api admin</code>
					</p>
				</div>

				<p>Then you can add the peer with a curl command</p>
				<code>
					curl -X POST --data '{ `{"jsonrpc":"2.0","method":"admin_addPeer","params":["` + enode + `"],"id":1}` }' http://127.0.0.1:8545
				</code>

				<h4 id="add-your-node-geth">Geth</h4>
				<p>Run the following command in the JavaScript console:</p>
				<code>
					admin.addPeer('{ enode }')
				</code>
				<p>Or, as a command:</p>
				<code>
					geth --exec "admin.addPeer('{ enode }')"
				</code>
				<p>If you run Geth in a container:</p>
				<code>
					docker exec CONTAINER_NAME geth --exec "admin.addPeer('{ enode }')" attach /ethclient/geth/geth.ipc
				</code>

				<h3 id="find-node-id">Find your node ID</h3>
				<p>Find your node ID so you can find your node on the website</p>

				<h4 id="find-node-id-rpc">RPC (All Clients)</h4>
				<p>
					The RPC does not provide a way to get this information. :(
				</p>
				<p>
					The best you can do is search for your IP address
				</p>

				<h4 id="find-node-id-geth">Geth</h4>
				<p>Run the following command in the JavaScript console:</p>
				<code>
					admin.nodeInfo.id
				</code>
				<p>Or, as a command:</p>
				<code>
					geth --exec "admin.nodeInfo.id"
				</code>
				<p>If you run Geth in a container:</p>
				<code>
					docker exec CONTAINER_NAME geth --exec "admin.nodeInfo.id" attach /ethclient/geth/geth.ipc
				</code>
			</div>
		</div>
	</div>
}

css nodeListClass() {
	display: flex;
	flex-direction: row;
	justify-content: center;
	margin: 1em;
}

type URL struct {
	url.URL
}

func URLFromReq(r *http.Request) URL {
	return URL{
		url.URL{
			Path: r.URL.Path,
			RawQuery: r.URL.RawQuery,
		},
	}
}

func (u URL) RemoveParam(keys ...string) URL {
	query := u.Query()

	for _, key := range keys {
		query.Del(key)
	}

	u.RawQuery = query.Encode()

	return u
}

func (u URL) WithParam(key, value string) URL {
	query := u.Query()
	query.Set(key, value)

	u.RawQuery = query.Encode()

	return u
}

func (u URL) KeepParams(keys ...string) URL {
	query := u.Query()
	newQuery := url.Values{}

	for _, key := range keys {
		if query.Has(key) {
			newQuery[key] = query[key]
		}
	}

	u.RawQuery = newQuery.Encode()

	return u
}

func (u URL) WithIntParam(key string, value int) URL {
	valueStr := strconv.Itoa(value)

	return u.WithParam(key, valueStr)
}

func (u URL) WithInt64Param(key string, value int64) URL {
	valueStr := strconv.FormatInt(value, 10)

	return u.WithParam(key, valueStr)
}

func (u URL) WithPath(path string) URL {
	u.Path = path

	return u
}

func (u URL) SafeURL() templ.SafeURL {
	return templ.URL(u.String())
}

func intToAllYesNo(i int) string {
	switch i {
		case -1:
			return "all"
		case 0:
			return "no"
		case 1:
			return "yes"
		default:
			panic("intToAllYesNo hit unreachable")
	}
}

templ NodeList(reqURL URL, nodes database.NodeList) {
	<div class={ nodeListClass() }>
		<div style="width: 100%; display: flex; flex-direction: column; row-gap: 0.5em;">
			<h3>Nodes</h3>
			@NetworkFilterLinks(reqURL, nodes.NetworkFilter)
			@SyncedFilterLinks(reqURL, nodes.Synced)
			<form action="/nodes" method="get" styles="display: flex; flex-direction: row; gap: 0.5em; flex-wrap: wrap;">
				<input name="network" type="hidden" value={ strconv.FormatInt(nodes.NetworkFilter, 10) }/>
				<input name="page" type="hidden" value={ strconv.Itoa(nodes.PageNumber) }/>
				<input name="synced" type="hidden" value={ intToAllYesNo(nodes.Synced) }/>
				<input class={ pageButton(), pageButtonActive() } name="q" type="text" placeholder="Search IP or Node ID" value={ nodes.Query }/>
				<input class={ pageButton(), pageButtonActive() } name="client-name" type="text" placeholder="Search Client Name" value={ nodes.ClientName }/>
				<input class={ pageButton(), pageButtonActive() } name="client-user-data" type="text" placeholder="Search Client User Data" value={ nodes.ClientUserData }/>
				<input class={ pageButton(), pageButtonActive() } type="submit" value="Search"/>
			</form>
			<div style="display: flex; justify-content: flex-start; flex-wrap: wrap; gap: 0.5em;">
				<a
 					href={ reqURL.WithParam("q", "").WithParam("page", "1").SafeURL() }
 					class={
						pageButton(),
						templ.KV(pageButtonActive(), nodes.Query == ""),
						templ.KV(pageButtonInactive(), nodes.Query != ""),
					}
				>
					All
				</a>
				for _, c := range []string{"0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"} {
					<a
 						href={ reqURL.WithParam("q", c).WithParam("page", "1").SafeURL() }
 						class={
							pageButton(),
							templ.KV(pageButtonActive(), nodes.Query == c),
							templ.KV(pageButtonInactive(), nodes.Query != c),
						}
					>
						{ c }
					</a>
				}
			</div>
			<table style="width:100%">
				<thead>
					<tr>
						<td>Node ID</td>
						<td>Client Name</td>
						<td>Client Version</td>
						<td>Client Build</td>
						<td>Client OS</td>
						<td>Client Arch</td>
						<td>Last Update</td>
						<td>Country</td>
						<td>Is Synced</td>
						<td>Dial Success</td>
					</tr>
				</thead>
				<tbody>
					for _, row := range nodes.List {
						<tr>
							<td><a href={ templ.URL("/nodes/" + row.NodeID()) }>{ row.NodeID()[:8] }</a></td>
							<td>{ database.StringOrEmpty(row.ClientName) }</td>
							<td>{ database.StringOrEmpty(row.ClientVersion) }</td>
							<td>{ database.StringOrEmpty(row.ClientBuild) }</td>
							<td>{ database.StringOrEmpty(row.ClientOS) }</td>
							<td>{ database.StringOrEmpty(row.ClientArch) }</td>
							if row.UpdatedAt != nil {
								<td title={ row.UpdatedAt.UTC().Format(database.DateFormat) }>{ row.SinceUpdate() }</td>
							} else {
								<td></td>
							}
							<td>{ database.StringOrEmpty(row.Country) }</td>
							<td>{ row.IsSynced() }</td>
							<td>{ boolToYesNo(row.DialSuccess) }</td>
						</tr>
					}
				</tbody>
			</table>
			<div style="display:flex; flex-direction:row; justify-content:flex-end; align-items:center; gap:2em;">
				<a
 					href={ reqURL.WithIntParam("page", nodes.PageNumber-1).SafeURL() }
 					class={ pageButton(), pageButtonActive(), templ.KV(disabled(), nodes.PageNumber == 1) }
				>
					Previous
				</a>
				<span>{ strconv.Itoa(nodes.PageNumber) }</span>
				<a
 					href={ reqURL.WithIntParam("page", nodes.PageNumber+1).SafeURL() }
 					class={ pageButton(), pageButtonActive(), templ.KV(disabled(), !nodes.HasNextPage) }
				>
					Next
				</a>
			</div>
		</div>
	</div>
}

css disabled() {
	pointer-events: none;
	filter: saturate(0);
}

func boolToYesNo(b bool) string {
	if b {
		return "Yes"
	}

	return "No"
}

func boolToStr(b bool) string {
	if b {
		return "true"
	}

	return "false"
}

templ HistoryList(reqURL URL, history database.HistoryList) {
	<div class={ nodeListClass() }>
		<div style="width: 100%; display: flex; flex-direction: column; row-gap: 0.5em;">
			<h3>History</h3>
			@NetworkFilterLinks(reqURL, history.NetworkID)
			<div style="display: flex; flex-direction: row; gap: 0.5em;">
				<a
 					class={
						pageButton(),
						templ.KV(pageButtonActive(), history.IsError == -1),
						templ.KV(pageButtonInactive(), history.IsError != -1),
					}
 					href={ reqURL.WithParam("error", "all").SafeURL() }
				>
					All
				</a>
				<a
 					class={
						pageButton(),
						templ.KV(pageButtonActive(), history.IsError == 1),
						templ.KV(pageButtonInactive(), history.IsError != 1),
					}
 					href={ reqURL.WithParam("error", "yes").SafeURL() }
				>
					Error
				</a>
				<a
 					class={
						pageButton(),
						templ.KV(pageButtonActive(), history.IsError == 0),
						templ.KV(pageButtonInactive(), history.IsError != 0),
					}
 					href={ reqURL.WithParam("error", "no").SafeURL() }
				>
					Success
				</a>
			</div>
			<div style="display: flex; gap: 0.5em; align-items: center;">
				<form style="display: flex; align-items: center; gap: 0.5em;" action="/history/" method="get">
					<input name="network" type="hidden" value={ strconv.FormatInt(history.NetworkID, 10) }/>
					<input class={ pageButton(), pageButtonActive() } name="after" type="datetime-local" step="1" value={ history.FirstTimeStr() }/> UTC
					<input class={ pageButton(), pageButtonActive() } title="Activate the flux capacitor" type="submit" value="Go to time"/>
				</form>
				<a
 					class={ pageButton(), pageButtonActive() }
 					href={ reqURL.RemoveParam("before", "after").SafeURL() }
 					title="We have to go back"
				>
					Go to now
				</a>
			</div>
			<table style="width:100%">
				<thead>
					<tr>
						<td>Node ID</td>
						<td>Client Identifier</td>
						<td>Network ID</td>
						<td>Crawled At</td>
						<td>Direction</td>
						<td>Error</td>
					</tr>
				</thead>
				<tbody>
					for _, row := range history.Rows {
						<tr>
							<td><a href={ templ.URL("/nodes/" + row.NodeID) }>{ row.NodeID[:8] }</a></td>
							<td>{ database.StringOrEmpty(row.ClientIdentifier) }</td>
							<td>{ row.NetworkIDStr() }</td>
							<td title={ row.CrawledAt.UTC().Format(database.DateFormat) }>{ row.SinceCrawled() }</td>
							<td>{ row.Direction }</td>
							<td>{ database.StringOrEmpty(row.Error) }</td>
						</tr>
					}
				</tbody>
			</table>
			<div style="display:flex;flex-direction:row;justify-content:space-between;align-items:center;gap:2em">
				<div></div>
				<div style="display:flex;flex-direction:row;align-items:center">
					if history.FirstTime != nil && history.LastTime != nil {
						<a
 							class={ pageButton(), pageButtonActive() }
 							href={ reqURL.RemoveParam("after").WithParam("before", history.FirstTimeStr()).SafeURL() }
						>
							Previous
						</a>
						<a
 							class={ pageButton(), pageButtonActive() }
 							href={ reqURL.RemoveParam("before").WithParam("after", history.LastTimeStr()).SafeURL() }
						>
							Next
						</a>
					}
				</div>
			</div>
		</div>
	</div>
}

css pageButton() {
	margin: 0.1em;
	padding: 0.5em 1em;
	border-radius: 0.2em;
	background-color: inherit;
	color: inherit;
	user-select: none;
}

css pageButtonActive() {
	border: 2px solid orange;
}

css pageButtonInactive() {
	border: 2px solid #eee;
}

func networkName(networkID int64) string {
	name := database.NetworkName(&networkID)

	if name == database.Unknown {
		return strconv.FormatInt(networkID, 10)
	}

	return name
}

templ NetworkFilterLinks(url URL, networkID int64) {
	<div style="display: flex; flex-direction: row; gap: 0.5em;">
		for _, netID := range []int64{-1, 1, 5, 17000, 11155111} {
			<a
 				class={
					pageButton(),
					templ.KV(pageButtonActive(), netID == networkID),
					templ.KV(pageButtonInactive(), netID != networkID),
				}
 				href={ url.WithInt64Param("network", netID).SafeURL() }
			>
				{ networkName(netID) }
			</a>
		}
	</div>
}

templ SyncedFilterLinks(url URL, synced int) {
	<div style="display: flex; flex-direction: row; gap: 0.5em;">
		<a
 			class={
				pageButton(),
				templ.KV(pageButtonActive(), synced == -1),
				templ.KV(pageButtonInactive(), synced != -1),
			}
 			href={ url.WithParam("synced", "all").SafeURL() }
		>
			All
		</a>
		<a
 			class={
				pageButton(),
				templ.KV(pageButtonActive(), synced == 1),
				templ.KV(pageButtonInactive(), synced != 1),
			}
 			href={ url.WithParam("synced", "yes").SafeURL() }
		>
			Synced
		</a>
		<a
 			class={
				pageButton(),
				templ.KV(pageButtonActive(), synced == 0),
				templ.KV(pageButtonInactive(), synced != 0),
			}
 			href={ url.WithParam("synced", "no").SafeURL() }
		>
			Not Synced
		</a>
	</div>
}

templ ReadyForNextForkLinks(name string, url URL, nextFork int) {
	<div style="display: flex; flex-direction: row; gap: 0.5em;">
		<a
 			class={
				pageButton(),
				templ.KV(pageButtonActive(), nextFork == -1),
				templ.KV(pageButtonInactive(), nextFork != -1),
			}
 			href={ url.WithParam("next-fork", "all").SafeURL() }
		>
			All
		</a>
		<a
 			class={
				pageButton(),
				templ.KV(pageButtonActive(), nextFork == 1),
				templ.KV(pageButtonInactive(), nextFork != 1),
			}
 			href={ url.WithParam("next-fork", "yes").SafeURL() }
		>
			Ready for { name }
		</a>
		<a
 			class={
				pageButton(),
				templ.KV(pageButtonActive(), nextFork == 0),
				templ.KV(pageButtonInactive(), nextFork != 0),
			}
 			href={ url.WithParam("next-fork", "no").SafeURL() }
		>
			Not ready for { name }
		</a>
	</div>
}

templ ReadyForNextForkLinksDisabled(url URL, networkID int64, nextFork int) {
	switch networkID {
	case -1, 1, 5, 17000, 11155111:
		<div style="pointer-events: none;">
			<span>Disabled, waiting for the fork time to be announced</span>
			@ReadyForNextForkLinks("Cancun", url, nextFork)
		</div>
	}
}

templ Stats(
	reqURL URL,
	networkID int64,
	synced int,
	nextFork int,
	charts []templ.Component,
	stats []templ.Component,
	isLoading bool,
) {
	<div style="display: flex; flex-direction: column; padding: 1em; gap: 1em;">
		@NetworkFilterLinks(reqURL.WithPath("/"), networkID)
		@SyncedFilterLinks(reqURL, synced)
		@ReadyForNextForkLinksDisabled(reqURL, networkID, nextFork)

		if isLoading {
			<span>
				One or more charts are empty.
				This could be because the data is being cached, or your set of filters
				resulted in empty data.
				Please try again soon.
			</span>
		}

		<div style="display: flex; flex-direction: row; gap: 1em; flex-wrap: wrap;">
			for _, chart := range charts {
				{! chart }
			}
		</div>

		<div style="display: flex; flex-direction: row; gap: 1em; flex-wrap: wrap;">
			for _, stat := range stats {
				{! stat }
			}
		</div>

		<div style="display: flex; flex-direction: column; align-items: flex-end; align-self: flex-end;">
			<span>Only shows nodes which were last found via discovery in the last 24 hours</span>
			<span>Updates every 30 minutes</span>
		</div>
	</div>
}

templ GraphsDisabled() {
	<span>Graphs disabled because there's too many series</span>
}

script statsGraph(title string, id string, ts database.Timeseries) {
	const chartDiv = document.getElementById(id)
	const chart = echarts.init(chartDiv, 'dark');

	chart.setOption({
		animation: false,
		backgroundColor: '#111',
		title: {
			text: title,
		},
		tooltip: {
		trigger: 'axis',
			axisPointer: {
				type: 'cross',
				label: {
					backgroundColor: '#6a7985'
				},
			},
			valueFormatter: (value) =>  value.toFixed(2) + '%',
			order: 'valueDesc',
		},
		legend: {
			data: ts.legend,
		},
		toolbox: {
			feature: {
				saveAsImage: {},
			},
		},
		grid: {
			left: '3%',
			right: '4%',
			bottom: '3%',
			containLabel: true,
		},
		xAxis: ts.xAxis,
		yAxis: [
			{
				type: 'value',
				max: ts.yAxisMax,
			},
		],
		series: ts.series,
	});

	const ro = new ResizeObserver(() => chart.resize());
	ro.observe(chartDiv);
}

templ StatsGraph(title string, id string, ts database.Timeseries) {
	<div class="chart" id={ id }></div>
	@statsGraph(title, id, ts)
}

templ StatsGroup(name string, stats database.CountTotal, hrefFn func(string) templ.SafeURL) {
	<div style="display: flex; flex-direction: column; border: 1px solid orange; border-radius: 1em; padding: 1em; flex-grow: 1; min-width: 30%;">
		<h2>{ name }</h2>
		<div style="background-color: #333; padding: 0.5em 0; width: 100%;">
			<span style="padding-inline-start: 0.5em; white-space: nowrap;">Total ({ strconv.FormatInt(stats.Total, 10) })</span>
		</div>
		<div style="display: flex; flex-direction: column; max-height: 20em; overflow-y: scroll;">
			for _, stat := range stats.Values {
				<div STYLE_REPLACE={ fmt.Sprintf("background-color: #333; padding: 0.5em 0; width: %d%%", stat.Count*100/stats.Total) }>
					<span style="padding-inline-start: 0.5em; white-space: nowrap;">
						if hrefFn(stat.Key) == "" {
							{ stat.Key } ({ strconv.FormatInt(stat.Count, 10) })
						} else {
							<a href={hrefFn(stat.Key)}>{ stat.Key } ({ strconv.FormatInt(stat.Count, 10) })</a>
						}
					</span>
				</div>
			}
		</div>
	</div>
}

templ Index(reqURL URL, main templ.Component, networkID int64, synced int) {
	<!DOCTYPE html>
	<html lang="en-US">
		<head>
			<title>Ethernets - Node Crawler</title>

			<meta property="og:title" content="Ethernets - Node Crawler" />
			<meta property="og:description" content="Crawls all the Ethereum networks." />
			<meta property="og:image" content="/eth-diamond-purple.png" />

			<script src="https://unpkg.com/echarts@5.4.3/dist/echarts.min.js"></script>

			<style type="text/css">
				html, body {
					margin: 0;
					background-color: #111;
					color: #eee;
				}
				.chart {
					display: flex;
					flex-grow: 1;
					padding: 1em;
					border: 1px solid orange;
					border-radius: 1em;
					width: 35%;
					height: 400px;
				}
				a:link {
					color: #eee;
				}
				a:visited {
					color: orange;
				}
				table {
					border-collapse: collapse;
				}
				td {
					padding: 0.5em 1em;
					word-break: break-all;
				}
				td:first-child {
					white-space: nowrap;
				}
				thead tr {
					background-color: #333;
				}
				thead {
					border-block-end: 2px solid #aaa;
				}
				tbody tr:nth-of-type(odd) {
					background-color: #222;
				}
				tbody tr:nth-of-type(even) {
					background-color: #333;
				}
				table td + td {
					border-inline-start: 1px solid #aaa;
				}
				nav {
					background-color: #333;
					display: flex;
					flex-direction: row;
				}
				nav ul {
					display: flex;
					flex-direction: row;
					list-style-type: none;
					margin: 0;
					padding: 0;
					overflow: hidden;
				}
				nav li {
					box-sizing: border-box;
				}
				nav li a,
				nav li a:visited {
					display: block;
					color: white;
					text-align: center;
					padding: 1em;
					text-decoration: none;
				}
				nav li:hover {
					background-color: #111;
				}
				nav li.active {
					border-block-end: 3px solid orange;
				}
				input {
					font-size: inherit;
				}
				code {
					padding: 1em 2em;
					background-color: #222;
					overflow-y: scroll;
				}
			</style>
		</head>
		<body>
			<nav>
				<ul>
					<li class={ templ.KV("active", reqURL.Path == "/") }><a href={ reqURL.WithPath("/").KeepParams("client-name", "network", "synced").SafeURL() }>Stats</a></li>
					<li class={ templ.KV("active", reqURL.Path == "/nodes/") }><a href={ reqURL.WithPath("/nodes/").KeepParams("client-name", "network", "synced").WithParam("page", "1").SafeURL() }>Nodes</a></li>
					<li class={ templ.KV("active", reqURL.Path == "/history/") }><a href={ reqURL.WithPath("/history/").KeepParams("network").SafeURL() }>Crawl History</a></li>
					<li class={ templ.KV("active", reqURL.Path == "/help/") }><a href="/help/">Help</a></li>
					<li class={ templ.KV("active", reqURL.Path == "/snapshots/") }><a href="/snapshots/">Snapshots</a></li>
				</ul>
			</nav>
			<main>
				{! main }
			</main>
		</body>
	</html>
}
