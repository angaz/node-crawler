package public

import "github.com/ethereum/node-crawler/pkg/database"
import "strconv"
import "fmt"
import "io/fs"
import "time"

templ NodeTable(nt database.NodeTable) {
	<div style="margin: 1em;">
		<h3>Node</h3>
		<table style="max-width=100%">
			<tbody>
				<tr>
					<td>ID</td>
					<td>{ nt.NodeID() }</td>
				</tr>
				<tr>
					<td>Client Name</td>
					<td>{ database.StringOrEmpty(nt.ClientName) }</td>
				</tr>
				<tr>
					<td>Last Found (Discovery)</td>
					<td>{ nt.LastFound() }</td>
				</tr>
				<tr>
					<td>Last Update (Crawled)</td>
					<td>{ nt.UpdatedAt() }</td>
				</tr>
				<tr>
					<td>Enode</td>
					<td>{ database.StringOrEmpty(nt.Enode) }</td>
				</tr>
				<tr>
					<td>RLPx Version</td>
					<td>{ nt.RLPXVersion() }</td>
				</tr>
				<tr>
					<td>Capabilities</td>
					<td>{ database.StringOrEmpty(nt.Capabilities) }</td>
				</tr>
				<tr>
					<td>Network ID</td>
					<td>{ nt.NetworkID() }</td>
				</tr>
				<tr>
					<td>Fork ID</td>
					<td>{ nt.ForkIDStr() }</td>
				</tr>
				<tr>
					<td>Next Fork ID</td>
					<td>{ nt.NextForkIDStr() }</td>
				</tr>
				<tr>
					<td>Head Hash</td>
					<td>{ nt.HeadHashLine() }</td>
				</tr>
				<tr>
					<td>IP Address</td>
					<td>{ database.StringOrEmpty(nt.IP) }</td>
				</tr>
				<tr>
					<td>Connection Type</td>
					<td>{ database.StringOrEmpty(nt.ConnectionType) }</td>
				</tr>
				<tr>
					<td>Country</td>
					<td>{ database.StringOrEmpty(nt.Country) }</td>
				</tr>
				<tr>
					<td>City</td>
					<td>{ database.StringOrEmpty(nt.City) }</td>
				</tr>
				<tr>
					<td>Next Crawl (Scheduled)</td>
					<td>{ nt.NextCrawl() }</td>
				</tr>
				<tr>
					<td>Is Synced</td>
					<td>{ nt.IsSynced() }</td>
				</tr>
			</tbody>
		</table>
		<div style="position: relative; width: max-content; margin: 1em 0;">
			<image width="800px" src="https://upload.wikimedia.org/wikipedia/commons/thumb/2/23/Blue_Marble_2002.png/1280px-Blue_Marble_2002.png"></image>
			<image style="REPLACE_THIS_ETH_LOGO" height="10%" src="https://ethereum.org/static/2aba39d4e25d90caabb0c85a58c6aba9/f41b0/eth-glyph-colored.png"></image>
		</div>
		<h3>Crawl Hitory</h3>
		<div style="display: flex; flex-wrap: wrap; column-gap: 2em;">
			<div style="display: flex; flex-direction: column; align-items: center; gap: 0.5em; border: 1px solid orange; border-radius: 1em; padding: 1em;">
				<h4 style="margin: 0;">Accept</h4>
				<span>Connections initiated by the node</span>
				<table>
					<thead>
						<tr>
							<td>Timestamp</td>
							<td>Since</td>
							<td>Error</td>
						</tr>
					</thead>
					<tbody>
						for _, row := range nt.HistoryAccept {
							<tr>
								<td>{ row.CrawledAt.UTC().Format(database.DateFormat) }</td>
								<td>{ row.CrawledAtLine() }</td>
								<td>{ row.Error }</td>
							</tr>
						}
					</tbody>
				</table>
			</div>
			<div style="display: flex; flex-direction: column; align-items: center; gap: 0.5em; border: 1px solid orange; border-radius: 1em; padding: 1em;">
				<h4 style="margin: 0;">Dial</h4>
				<span>Connections initiated by the crawler</span>
				<table>
					<thead>
						<tr>
							<td>Timestamp</td>
							<td>Since</td>
							<td>Error</td>
						</tr>
					</thead>
					<tbody>
						for _, row := range nt.HistoryDial {
							<tr>
								<td>{ row.CrawledAt.UTC().Format(database.DateFormat) }</td>
								<td>{ row.CrawledAtLine() }</td>
								<td>{ row.Error }</td>
							</tr>
						}
					</tbody>
				</table>
			</div>
		</div>
	</div>
}

func ByteCountIEC(b int64) string {
	const unit = int64(1024)

	if b < unit {
		return fmt.Sprintf("%d B", b)
	}

	div, exp := unit, 0
	for n := b / unit; n >= unit; n /= unit {
		div *= unit
		exp++
	}

	return fmt.Sprintf(
		"%.1f %ciB",
		float64(b)/float64(div),
		"KMGTPE"[exp],
	)
}

templ BackupsList(files []fs.FileInfo) {
	<div style="margin: 1em;">
		<h3>SQLite3 Backups</h3>
		<table style="max-width=100%">
			<thead>
				<tr>
					<td>Filename</td>
					<td>Size</td>
					<td>Modified (UTC)</td>
				</tr>
			</thead>
			<tbody>
				for _, file := range files {
					<tr>
						<td>
							<a href={ templ.URL(fmt.Sprintf("/backups/%s", file.Name())) }>
								{ file.Name() }
							</a>
						</td>
						<td title={ strconv.FormatInt(file.Size(), 10) }>{ ByteCountIEC(file.Size()) }</td>
						<td>{ file.ModTime().Format(time.DateTime) }</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
}

templ HelpPage(enode string) {
	<div style="display: flex; flex-direction: column; gap: 1em; padding: 1em;">
		<h2>Help</h2>
		<div style="display: flex; flex-direction: column; gap: 0.5em;">
			<h3>Add your node</h3>
			<span>If your node is not found, it can be easily added.</span>
			<h4>Geth</h4>
			<span>Run the following command in the Javascript console:</span>
			<code>
				admin.addPeer('{ enode }')
			</code>
			<span>Or, as a command:</span>
			<code>
				geth --exec "admin.addPeer('{ enode }')"
			</code>
			<span>If you run Geth in a container:</span>
			<code>
				docker exec CONTAINER_NAME geth --exec "admin.addPeer('{ enode }')" attach /ethclient/geth/geth.ipc
			</code>
			<h3>Find your node ID</h3>
			<span>Find your node ID so you can find your node on the website</span>
			<h4>Geth</h4>
			<span>Run the following command in the JavaScript console:</span>
			<code>
				admin.nodeInfo.id
			</code>
			<span>Or, as a command:</span>
			<code>
				geth --exec "admin.nodeInfo.id"
			</code>
			<span>If you run Geth in a container:</span>
			<code>
				docker exec CONTAINER_NAME geth --exec "admin.nodeInfo.id" attach /ethclient/geth/geth.ipc
			</code>
		</div>
	</div>
}

css nodeListClass() {
	display: flex;
	flex-direction: row;
	justify-content: center;
	margin: 1em;
}

templ NodeList(nodes database.NodeList) {
	<div class={ nodeListClass() }>
		<div style="width: 100%; display: flex; flex-direction: column; row-gap: 0.5em;">
			<h3>Nodes</h3>
			@NetworkFilterLinks(fmt.Sprintf("/nodes/?network=%%d&page=%d&synced=%d&q=%s", nodes.PageNumber, nodes.Synced, nodes.Query), nodes.NetworkFilter)
			@SyncedFilterLinks(fmt.Sprintf("/nodes/?network=%d&page=%d&synced=%%d&q=%s", nodes.NetworkFilter, nodes.PageNumber, nodes.Query), nodes.Synced)
			<form action="/nodes" method="get">
				<input name="network" type="hidden" value={ strconv.FormatInt(nodes.NetworkFilter, 10) }/>
				<input name="page" type="hidden" value={ strconv.Itoa(nodes.PageNumber) }/>
				<input name="synced" type="hidden" value={ strconv.Itoa(nodes.Synced) }/>
				<input class={ pageButton(), pageButtonActive() } name="q" type="text" placeholder="Search IP or Node ID" value={ nodes.Query }/>
				<input class={ pageButton(), pageButtonActive() } type="submit" value="Search"/>
			</form>
			<div style="display: flex; justify-content: flex-start; flex-wrap: wrap; gap: 0.5em;">
				<a
 					href={ templ.URL(fmt.Sprintf("/nodes/?network=%d&page=1&synced=%d&q=", nodes.NetworkFilter, nodes.Synced)) }
 					class={
						pageButton(),
						templ.KV(pageButtonActive(), nodes.Query == ""),
						templ.KV(pageButtonInactive(), nodes.Query != ""),
					}
				>
					All
				</a>
				for _, c := range []string{"0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"} {
					<a
 						href={ templ.URL(fmt.Sprintf("/nodes/?network=%d&page=1&synced=%d&q=%s", nodes.NetworkFilter, nodes.Synced, c)) }
 						class={
							pageButton(),
							templ.KV(pageButtonActive(), nodes.Query == c),
							templ.KV(pageButtonInactive(), nodes.Query != c),
						}
					>
						{ c }
					</a>
				}
			</div>
			<table style="width:100%">
				<thead>
					<tr>
						<td>Node ID</td>
						<td>Client Name</td>
						<td>Last Update</td>
						<td>Country</td>
						<td>Is Synced</td>
					</tr>
				</thead>
				<tbody>
					for _, row := range nodes.List {
						<tr>
							<td><a href={ templ.URL("/nodes/" + row.NodeID()) }>{ row.NodeID()[:8] }</a></td>
							if row.ClientName != nil {
								<td>{ *row.ClientName }</td>
							} else {
								<td></td>
							}
							if row.UpdatedAt != nil {
								<td title={ row.UpdatedAt.UTC().Format(database.DateFormat) }>{ row.SinceUpdate() }</td>
							} else {
								<td></td>
							}
							if row.Country != nil {
								<td>{ *row.Country }</td>
							} else {
								<td></td>
							}
							<td>{ row.IsSynced() }</td>
						</tr>
					}
				</tbody>
			</table>
			<div style="display:flex; flex-direction:row; justify-content:flex-end; align-items:center; gap:2em;">
				<a
 					href={ templ.URL(fmt.Sprintf("/nodes/?network=%d&page=%d&synced=%d&q=%s", nodes.NetworkFilter, nodes.PageNumber-1, nodes.Synced, nodes.Query)) }
 					class={ pageButton(), pageButtonActive(), templ.KV(disabled(), nodes.PageNumber == 1) }
				>
					Previous
				</a>
				<span>{ strconv.Itoa(nodes.PageNumber) }</span>
				<a
 					href={ templ.URL(fmt.Sprintf("/nodes/?network=%d&page=%d&synced=%d&q=%s", nodes.NetworkFilter, nodes.PageNumber+1, nodes.Synced, nodes.Query)) }
 					class={ pageButton(), pageButtonActive(), templ.KV(disabled(), !nodes.HasNextPage) }
				>
					Next
				</a>
			</div>
		</div>
	</div>
}

css disabled() {
	pointer-events: none;
	filter: saturate(0);
}

func boolToStr(b bool) string {
	if b {
		return "true"
	}

	return "false"
}

templ HistoryList(history database.HistoryList) {
	<div class={ nodeListClass() }>
		<div style="width: 100%; display: flex; flex-direction: column; row-gap: 0.5em;">
			<h3>History</h3>
			@NetworkFilterLinks(
				fmt.Sprintf(
					"/history/?network=%%d&before=%s&after=%s&error=%d",
					history.BeforeStr(),
					history.AfterStr(),
					history.IsError,
				),
				history.NetworkID,
			)
			<div style="display: flex; flex-direction: row; gap: 0.5em;">
				<a
 					class={
						pageButton(),
						templ.KV(pageButtonActive(), history.IsError == -1),
						templ.KV(pageButtonInactive(), history.IsError != -1),
					}
 					href={ templ.URL(fmt.Sprintf(
								"/history/?network=%d&before=%s&after=%s&error=-1",
								history.NetworkID,
								history.BeforeStr(),
								history.AfterStr(),
							)) }
				>
					All
				</a>
				<a
 					class={
						pageButton(),
						templ.KV(pageButtonActive(), history.IsError == 1),
						templ.KV(pageButtonInactive(), history.IsError != 1),
					}
 					href={ templ.URL(fmt.Sprintf(
								"/history/?network=%d&before=%s&after=%s&error=1",
								history.NetworkID,
								history.BeforeStr(),
								history.AfterStr(),
							)) }
				>
					Error
				</a>
				<a
 					class={
						pageButton(),
						templ.KV(pageButtonActive(), history.IsError == 0),
						templ.KV(pageButtonInactive(), history.IsError != 0),
					}
 					href={ templ.URL(fmt.Sprintf(
								"/history/?network=%d&before=%s&after=%s&error=0",
								history.NetworkID,
								history.BeforeStr(),
								history.AfterStr(),
							)) }
				>
					Success
				</a>
			</div>
			<div style="display: flex; gap: 0.5em; align-items: center;">
				<form style="display: flex; align-items: center; gap: 0.5em;" action="/history/" method="get">
					<input name="network" type="hidden" value={ strconv.FormatInt(history.NetworkID, 10) }/>
					<input class={ pageButton(), pageButtonActive() } name="after" type="datetime-local" step="1" value={ history.FirstTimeStr() }/> UTC
					<input class={ pageButton(), pageButtonActive() } title="Activate the flux capacitor" type="submit" value="Go to time"/>
				</form>
				<a
 					class={ pageButton(), pageButtonActive() }
 					href={ templ.URL(fmt.Sprintf(
							"/history/?network=%d&error=%d",
							history.NetworkID,
							history.IsError,
						)) }
 					title="We have to go back"
				>
					Go to now
				</a>
			</div>
			<table style="width:100%">
				<thead>
					<tr>
						<td>Node ID</td>
						<td>Client Name</td>
						<td>Network ID</td>
						<td>Crawled At</td>
						<td>Direction</td>
						<td>Error</td>
					</tr>
				</thead>
				<tbody>
					for _, row := range history.Rows {
						<tr>
							<td><a href={ templ.URL("/nodes/" + row.NodeID) }>{ row.NodeID[:8] }</a></td>
							<td>{ database.StringOrEmpty(row.ClientName) }</td>
							<td>{ row.NetworkIDStr() }</td>
							<td title={ row.CrawledAt.UTC().Format(database.DateFormat) }>{ row.SinceCrawled() }</td>
							<td>{ row.Direction }</td>
							<td>{ database.StringOrEmpty(row.Error) }</td>
						</tr>
					}
				</tbody>
			</table>
			<div style="display:flex;flex-direction:row;justify-content:space-between;align-items:center;gap:2em">
				<div></div>
				<div style="display:flex;flex-direction:row;align-items:center">
					if history.FirstTime != nil && history.LastTime != nil {
						<a
 							class={ pageButton(), pageButtonActive() }
 							href={ templ.URL(fmt.Sprintf("/history/?network=%d&before=%s", history.NetworkID, history.FirstTimeStr())) }
						>
							Previous
						</a>
						<a
 							class={ pageButton(), pageButtonActive() }
 							href={ templ.URL(fmt.Sprintf("/history/?network=%d&after=%s", history.NetworkID, history.LastTimeStr())) }
						>
							Next
						</a>
					}
				</div>
			</div>
		</div>
	</div>
}

templ pageNumberButton(networkID int64, pageNumber int, isPage bool, synced int, query string) {
}

css pageButton() {
	margin: 0.1em;
	padding: 0.5em 1em;
	border-radius: 0.2em;
	background-color: inherit;
	color: inherit;
	user-select: none;
}

css pageButtonActive() {
	border: 2px solid orange;
}

css pageButtonInactive() {
	border: 2px solid #eee;
}

func networkName(networkID int64) string {
	name := database.NetworkName(&networkID)

	if name == database.Unknown {
		return strconv.FormatInt(networkID, 10)
	}

	return name
}

templ NetworkFilterLinks(hrefTemplate string, networkID int64) {
	<div style="display: flex; flex-direction: row; gap: 0.5em;">
		for _, netID := range []int64{-1, 1, 5, 17000, 11155111} {
			<a
 				class={
					pageButton(),
					templ.KV(pageButtonActive(), netID == networkID),
					templ.KV(pageButtonInactive(), netID != networkID),
				}
 				href={ templ.URL(fmt.Sprintf(hrefTemplate, netID)) }
			>
				{ networkName(netID) }
			</a>
		}
	</div>
}

templ SyncedFilterLinks(hrefTemplate string, synced int) {
	<div style="display: flex; flex-direction: row; gap: 0.5em;">
		<a
 			class={
				pageButton(),
				templ.KV(pageButtonActive(), synced == -1),
				templ.KV(pageButtonInactive(), synced != -1),
			}
 			href={ templ.URL(fmt.Sprintf(hrefTemplate, -1)) }
		>
			All
		</a>
		<a
 			class={
				pageButton(),
				templ.KV(pageButtonActive(), synced == 1),
				templ.KV(pageButtonInactive(), synced != 1),
			}
 			href={ templ.URL(fmt.Sprintf(hrefTemplate, 1)) }
		>
			Synced
		</a>
		<a
 			class={
				pageButton(),
				templ.KV(pageButtonActive(), synced == 0),
				templ.KV(pageButtonInactive(), synced != 0),
			}
 			href={ templ.URL(fmt.Sprintf(hrefTemplate, 0)) }
		>
			Not Synced
		</a>
	</div>
}

templ Stats(networkID int64, synced int, stats ...templ.Component) {
	<div style="display: flex; flex-direction: column; padding: 1em; gap: 1em;">
		@NetworkFilterLinks(fmt.Sprintf("/?network=%%d&synced=%d", synced), networkID)
		@SyncedFilterLinks(fmt.Sprintf("/?network=%d&synced=%%d", networkID), synced)
		<div style="display: flex; flex-direction: row; gap: 1em; flex-wrap: wrap;">
			for _, stat := range stats {
				{! stat }
			}
		</div>
		<span style="align-self: flex-end;">Only shows nodes which were last found via discovery in the last 24 hours</span>
	</div>
}

templ StatsGroup(name string, stats database.CountTotal) {
	<div style="display: flex; flex-direction: column; border: 1px solid orange; border-radius: 1em; padding: 1em; flex-grow: 1; min-width: 30%;">
		<h2>{ name }</h2>
		<div style="background-color: #333; padding: 0.5em 0; width: 100%;">
			<span style="padding-inline-start: 0.5em; white-space: nowrap;">Total ({ strconv.Itoa(stats.Total) })</span>
		</div>
		for _, stat := range stats.Values {
			<div STYLE_REPLACE={ fmt.Sprintf("background-color: #333; padding: 0.5em 0; width: %d%%", stat.Count*100/stats.Total) }>
				<span style="padding-inline-start: 0.5em; white-space: nowrap;">{ stat.Key } ({ strconv.Itoa(stat.Count) })</span>
			</div>
		}
	</div>
}

templ Index(main templ.Component, networkID int64, synced int) {
	<!DOCTYPE html>
	<html lang="en-US">
		<head>
			<title>Node Crawler</title>
			<style type="text/css">
				html, body {
					margin: 0;
					background-color: #111;
					color: #eee;
				}
				a:link {
					color: #eee;
				}
				a:visited {
					color: orange;
				}
				table {
					border-collapse: collapse;
				}
				td {
					padding: 0.5em 1em;
					word-break: break-all;
				}
				td:first-child {
					white-space: nowrap;
				}
				thead tr {
					background-color: #333;
				}
				thead {
					border-block-end: 2px solid #aaa;
				}
				tbody tr:nth-of-type(odd) {
					background-color: #222;
				}
				tbody tr:nth-of-type(even) {
					background-color: #333;
				}
				table td + td {
					border-inline-start: 1px solid #aaa;
				}
				nav {
					background-color: #333;
					display: flex;
					flex-direction: row;
				}
				nav ul {
					display: flex;
					flex-direction: row;
					list-style-type: none;
					margin: 0;
					padding: 0;
					overflow: hidden;
				}
				nav li a,
				nav li a:visited {
					display: block;
					color: white;
					text-align: center;
					padding: 1em;
					text-decoration: none;
				}
				nav li a:hover {
					background-color: #111;
				}
				input {
					font-size: inherit;
				}
			</style>
		</head>
		<body>
			<nav>
				<ul>
					<li><a href={ templ.URL(fmt.Sprintf("/?network=%d&synced=%d", networkID, synced)) }>Stats</a></li>
					<li><a href={ templ.URL(fmt.Sprintf("/nodes/?network=%d&page=1&synced=%d&q=", networkID, synced)) }>Nodes</a></li>
					<li><a href={ templ.URL(fmt.Sprintf("/history/?network=%d", networkID)) }>Crawl History</a></li>
					<li><a href="/help">Help</a></li>
					<li><a href="/backups/">Backups</a></li>
				</ul>
			</nav>
			<main>
				{! main }
			</main>
		</body>
	</html>
}
